AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for CSCI 4145 term project

Parameters:
  LabRoleArn: 
    Type: String
    Description: Existing role for service permission

Resources:
  # Create VPC
  ProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ProjectVPC

  # Create public subnet for frontend
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create 2 private subnets for RDS
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DBSubnet-1

  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: us-east-1d
      CidrBlock: 10.0.4.0/22
      Tags:
        - Key: Name
          Value: DBSubnet-2

  # Create internet gateway
  ProjectInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: project-igw

  # Provide internet gateway attachment to the VPC
  ProjectVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ProjectVPC
      InternetGatewayId: !Ref ProjectInternetGateway

  # Create a route table for frontend subnet
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProjectVPC
      Tags:
        - Key: Name
          Value: public-rt

  # Create associate route to access the Internet
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ProjectVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProjectInternetGateway

  # Associate route with route table
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  # Create public security group
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable SSH and HTTP access to the subnet'
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      Tags: 
        - Key: Name
          Value: public-sg
  
  # Security Group for RDS database
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow database access from Private EC2 instance'
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PublicSecurityGroup
      Tags:
        - Key: Name
          Value: DBSecurityGroup
    
  # Create backend EC2 instance 
  BackendEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 't2.micro'
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      SubnetId: !Ref PublicSubnet
      ImageId: 'ami-0427090fd1714168b'
      IamInstanceProfile: LabInstanceProfile
      KeyName: project-keypair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update-y
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
          docker pull lamtieu12/project-backend
          docker run -d -p 80:8080 lamtieu12/project-backend
      Tags:
        - Key: Name
          Value: backend-ec2
    
  # Create frontend EC2 instance
  FrontendEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: BackendEC2Instance
    Properties:
      InstanceType: 't2.micro'
      SecurityGroupIds: 
        - !Ref PublicSecurityGroup
      SubnetId: !Ref PublicSubnet
      ImageId: 'ami-0427090fd1714168b'
      IamInstanceProfile: LabInstanceProfile
      KeyName: project-keypair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update-y
          yum install -y docker
          service docker start
          usermod -a -G docker ec2-user
      Tags:
        - Key: Name
          Value: frontend-ec2

  # Create RDS subnet group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
      Tags:
        - Key: Name
          Value: rdsSubnetGroup
    
  # RDS Instance
  ProjectDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: projectdb
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      MasterUsername: admin
      MasterUserPassword: Lam01122002
      DBName: pet_lists
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
  
  # Secrets Manager Secret for RDS Credentials
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: db_secret
      Description: 'RDS database credentials'
      SecretString: !Sub |
        {
          "username": "admin",
          "password": "Lam01122002",
          "host": "${ProjectDBInstance.Endpoint.Address}",
          "port": 3306,
          "dbname": "pet_lists"
        }

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
        SecretId: !Ref DBSecret
        TargetId: !Ref ProjectDBInstance
        TargetType: AWS::RDS::DBInstance

  # Create SNS Topic to send email
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ConfirmEmailTopic
      DisplayName: Pawfect Match
      Subscription:
        - Endpoint: "tieunhatlam1210@gmail.com"
          Protocol: email
  
  # Create lambda function to invoke SNS service
  InvokeSNSLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: SnsTopic
    Properties: 
      FunctionName: InvokeSNS
      Handler: index.handler
      Role: !Ref LabRoleArn
      Runtime: nodejs18.x
      Timeout: 900
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SnsTopic
      Code:
        S3Bucket: project-lambda-func
        S3Key: lambda.zip

Outputs:
  VpcId: 
    Description: VPC ID
    Value: !Ref ProjectVPC   

  PublicSubnetId:
    Description: The public subnet ID
    Value: !Ref PublicSubnet

  FrontendEC2Id:
    Description: Instance ID of frontend EC2
    Value: !Ref FrontendEC2Instance
  
  BackendEC2Id:
    Description: Instance ID of backend EC2
    Value: !Ref BackendEC2Instance
  
  DBSubnetGroup:
    Description: The Subnet Group for the RDS instance
    Value: !Ref RDSSubnetGroup

  RDSInstanceId: 
      Description: RDS Instance ID
      Value: !Ref ProjectDBInstance

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref InvokeSNSLambdaFunction

  SNSTopicARN:
    Description: The ARN of the SNS topic
    Value: !Ref SnsTopic